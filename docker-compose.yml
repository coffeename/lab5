version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydb
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydb
      RABBITMQ_URL: amqp://rabbitmq:5672
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydb
      RABBITMQ_URL: amqp://rabbitmq:5672
    ports:
      - "3003:3003"

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      # для контейнерів звертатися по імені сервісу в мережі docker compose
      USER_SERVICE_URL:    http://user-service:3000
      ROOM_SERVICE_URL:    http://room-service:3002
      BOOKING_SERVICE_URL: http://booking-service:3003

volumes:
  pgdata:
